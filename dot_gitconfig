[user]
    name = Ryan
    editor = vim
[include]
    path = .gitconfig.local

[alias]
 # basic {{{
    br = branch
    ci = commit
    cl = clone
    co = checkout
    cp = cherry-pick
    gr = grep -Ii
    pu = pull
    r = reset
    st = status --ignore-submodules=dirty
    sti = status --ignored
    w  = whatchanged --reverse
# }}}

    # find files
    ff = "!git ls-files | grep -i"

    # search commits
    sc = "log --all --date=format:\"%b %d, %Y\" --pretty=format:\"%Cgreen %h %C(white) %s %C(dim)%an on %cd\" --grep"

    # list aliases
    la = "!git config -l | grep alias | cut -c 7-"

    # pre-commit
    pre = "!git diff --cached --name-only --diff-filter=d | xargs pre-commit run --files"

# log commands {{{
    # https://stackoverflow.com/a/45757255
    l4date = "!f() { git log --pretty='format:%C(yellow)%h %G? %ad%Cred%d %Creset%s%C(cyan) [%cn]' --decorate --after=\"$1 0:00\" --before=\"$1 23:59\" --author \"`git config user.name`\"; }; f"
    # http://www.jukie.net/bart/blog/pimping-out-git-log

    ls = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

    # file log
    fl = log -u

    prior-hash = "!ph() { git log --pretty=format:'%h' -1 --skip=$1 $2; }; ph"

    # days
    per-day = "!pd() { git log --date=short --pretty=format:%ad | sort | uniq -c; }; pd"

    today = log --since=midnight --color --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)[%an]%Creset' \
        --abbrev-commit

    yesterday = log --since=yesterday --until=midnight --color --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)[%an]%Creset' \
        --abbrev-commit

    # graph
    graph = log --graph --abbrev-commit --decorate --all \
        --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) \
        %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'

    history = log --graph --pretty=format:'%C(yellow)%h%Creset \
        -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' \
        --abbrev-commit --date=short --date-order -n30
# }}}

# commit {{{
    cm = commit -m
    cma = commit -a -m
    ca = commit --amend
    amend = commit --amend
    caa = commit -a --amend -C HEAD
# }}}

# diff {{{
    d = diff --word-diff
    dc = diff --cached

    # diff last commit
    dlc = diff --cached HEAD^
    dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"

    diff-prev-easy = "!dp() { git diff $(git prior-hash $1 $2).. $2; }; dp"
    diff-prev = "!dp() { git diff $(git prior-hash $1 $2)..$(git prior-hash $(($1 - 1)) $2) $2; }; dp"

    # difftastic
    dft = "!difftastic() { DFT_DISPLAY=side-by-side-show-both GIT_EXTERNAL_DIFF=difft git diff $1; }; difftastic"
# }}}

# reset commands {{{
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard
# }}}

# showtool commands {{{
  showtool = "!f() { git difftool $1^ $1; }; f"
  added = difftool --cached
# }}}

# stash {{{
    sl = stash list
    sa = stash apply
    ss = stash save
# }}}

# cleanup {{{
    ls-gone = "!ls_gone() { git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" {print $1}'; }; ls_gone;"
    gone = "!gone() { git ls-gone | xargs -n 1 git branch -D; }; gone;"
# }}}

# stats / analytics {{{
    contributors = shortlog --summary --numbered
    author-count-commit = !git log --format="%aE" $@ | tr "[:upper:]" "[:lower:]" | sort | uniq -c | sort -nr
    author-count-lines = !git ls-files -z | xargs -0n1 git blame --line-porcelain | grep '^author-mail' | cut -d ' ' -f 2 | tr "[:upper:]" "[:lower:]" | sort | uniq -c | sort -nr
    author-latest-commit = !git log --branches --format='%ad %aN' --date=iso --no-merges | sort -k4,4 -u
    filetrail = log --follow -p -w
    mergetrail = log --ancestry-path --merges
    bigfiles = !git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | sed -n 's/^blob //p' | sort --numeric-sort --key=2 | tail -n 10 | cut -c 2-12,41- | $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest
# }}}

# gh {{{
    checkout-pr = "!f() { gh pr checkout $1 }; f;"
    fork = !"gh repo fork --remote"
    pr = !"gh pr create --fill"
# }}}

[apply]
    whitespace = nowarn

[color]
    branch = auto
    diff = auto
    interactive = auto
    status = auto
    ui = auto

[color "branch"]
	current = green
	local = normal
	remote = red
	plain = normal

[color "diff"]
	plain = normal
	meta = bold
	frag = cyan
	old = red
	new = green
	commit = yellow
	whitespace = normal red

[color "grep"]
	match = normal

[color "interactive"]
	prompt = normal
	header = normal
	help = normal
	error = normal

[color "status"]
	header = normal
	added = red
	updated = green
	changed = red
	untracked = red
	nobranch = red

[core]
    excludesfile = ~/.gitignore
    hooksPath = ~/.githooks
    editor = vim

[init]
    defaultBranch = main

# push/pull/diff/options {{{
[push]
    default = upstream

[pull]
    default = current

[diff]
    mnemonicprefix = true
    tool = bc
    colorMoved = default

[difftool]
    prompt = false

[branch]
    autosetuprebase = always

[apply]
    whitespace = nowarn
#}}}

[man]
    viewer = man

[merge]
    tool = bc
    conflictstyle = diff3

[mergetool]
    prompt = false

[mergetool "bc"]
    trustExitCode = true

[rebase]
    autosquash = true

[mergetool]
	bc3 = trustExitCode
[bash-it]
	hide-status = 0
[gpg]
	format = ssh
[commit]
	gpgsign = true
